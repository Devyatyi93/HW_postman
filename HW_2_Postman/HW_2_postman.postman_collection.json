{
	"info": {
		"_postman_id": "0ca9130e-9262-46ee-ae96-146548bf4a05",
		"name": "HW_2_postman",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "n_1",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1. Отправить запрос.\r",
							"// 2. Статус код 200\r",
							"// 3. Проверить, что в body приходит правильный string.\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Body is correct\", function () {\r",
							"    pm.response.to.have.body(\"This is the first responce from server!\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5005/first",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"first"
					]
				}
			},
			"response": []
		},
		{
			"name": "n_2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"\r",
							"// 1. Отправить запрос.\r",
							"// 2. Статус код 200\r",
							"pm.test(\"Statuscode is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// 3. Спарсить response body в json.\r",
							"var b_resp=pm.response.json();\r",
							"\r",
							"// 4. Проверить, что name в ответе равно name s request (name вбить руками.)\r",
							"pm.test(\"Test name\", function () {\r",
							"    var json_name = pm.response.json();\r",
							"    pm.expect(json_name.name).to.eql(\"Dima\")\r",
							"})\r",
							"\r",
							"// 5. Проверить, что age в ответе равно age s request (age вбить руками.)\r",
							"var json_age = pm.response.json();\r",
							"var yol_1=parseInt(json_age.age);\r",
							"pm.test(\"Test age\", function () {\r",
							"    pm.expect(yol_1).to.eql(30)\r",
							"})\r",
							"\r",
							"// 6. Проверить, что salary в ответе равно salary s request (salary вбить руками.)\r",
							"pm.test(\"Test salary\", function () {\r",
							"    var json_salary= pm.response.json();\r",
							"    pm.expect(json_salary.salary).to.eql(1000);\r",
							"})\r",
							"\r",
							"// 7. Спарсить request.\r",
							" var name_req=request.data;\r",
							"// 8. Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"pm.test(\"Name_s_request\", function () {\r",
							"    var name_s=pm.response.json();\r",
							"    pm.expect(name_s.name).to.eql(name_req.name)\r",
							"})\r",
							"\r",
							"// 9. Проверить, что age в ответе равно age s request (age забрать из request.)\r",
							"pm.test(\"Age_s_request\", function () {\r",
							"    var age_s= pm.response.json();\r",
							"    var age_req=request.data;\r",
							"    pm.expect(age_s.age).to.eql(age_req.age)\r",
							"});\r",
							"\r",
							"// 10. Проверить, что salary в ответе равно salary s request (salary забрать из request.)\r",
							"pm.test(\"Salary_s_request\", function () {\r",
							"    var salary_s=pm.response.json();\r",
							"    var salary_req=request.data;\r",
							"    pm.expect(salary_s.salary).to.eql(parseInt(salary_req.salary));\r",
							"})\r",
							"\r",
							"// 11. Вывести в консоль параметр family из response.\r",
							"var family_all=pm.response.json();\r",
							"console.log(family_all.family)\r",
							"\r",
							"// 12. Проверить что u_salary_1_5_year в ответе равно salary*4 (salary забрать из request)\r",
							"pm.test(\"Salary is salary*4\", function (){\r",
							"    var family_salary=pm.response.json();\r",
							"    var salary_4=request.data;\r",
							"    pm.expect(family_salary.family.u_salary_1_5_year).to.eql(parseInt(salary_4.salary)*4)\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "Dima",
							"type": "text"
						},
						{
							"key": "age",
							"value": "30",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "1000",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/user_info_3",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"user_info_3"
					]
				}
			},
			"response": []
		},
		{
			"name": "n_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"\r",
							"// 1. Отправить запрос.\r",
							"// 2. Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"// 3. Спарсить response body в json.\r",
							"var b_resp=pm.response.json();\r",
							"// 4. Спарсить request.\r",
							"var req=pm.request.url.query.toObject()\r",
							"// 5. Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"pm.test(\"Name_s_req\", function () {\r",
							"    var name_resp=pm.response.json();\r",
							"    var name_requ=pm.request.url.query.toObject();\r",
							"    pm.expect(name_resp.name).to.eql(name_requ.name)\r",
							"})\r",
							"\r",
							"// 6. Проверить, что age в ответе равно age s request (age забрать из request.)\r",
							"pm.test(\"Age_s_req\"), function () {\r",
							"    var age_req=pm.request.url.query.toObject();\r",
							"    var age_resp=pm.response.json();\r",
							"    pm.expect(age_resp.age).to.eql(age_req.age)\r",
							"}\r",
							"\r",
							"// 7. Проверить, что salary в ответе равно salary s request (salary забрать из request.)\r",
							"pm.test(\"Salary_s_request\", function () {\r",
							"    var salary_resp=pm.response.json();\r",
							"    var salary_req=pm.request.url.query.toObject();\r",
							"    pm.expect(salary_resp.salary).to.eql(parseInt(salary_req.salary))\r",
							"})\r",
							"// 8. Вывести в консоль параметр family из response.\r",
							"console.log(pm.response.json().family)\r",
							"// 9. Проверить, что у параметра dog есть параметры name.\r",
							"pm.test(\"name dog\", function () {\r",
							"    var dog_name=pm.response.json()\r",
							"    pm.expect(dog_name.family.pets.dog).to.have.any.keys(\"name\")\r",
							"})\r",
							"// 10. Проверить, что у параметра dog есть параметры age.\r",
							"pm.test(\"age dog\", function () {\r",
							"    var dog_age=pm.response.json()\r",
							"    pm.expect(dog_age.family.pets.dog).to.have.any.keys(\"age\")\r",
							"})\r",
							"// 11. Проверить, что параметр name имеет значение Luky.\r",
							"pm.test(\"name is Luky\", function () {\r",
							"    var name_d=pm.response.json()\r",
							"    pm.expect(name_d.family.pets.dog.name).to.eql(\"Luky\")\r",
							"})\r",
							"// 12. Проверить, что параметр age имеет значение 4.\r",
							"pm.test(\"age is 4\", function () {\r",
							"    var age_d=pm.response.json();\r",
							"    pm.expect(age_d.family.pets.dog.age).to.eql(4)\r",
							"})\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5005/object_info_3?name=Aleksandr&age=35&salary=1500",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"object_info_3"
					],
					"query": [
						{
							"key": "name",
							"value": "Aleksandr"
						},
						{
							"key": "age",
							"value": "35"
						},
						{
							"key": "salary",
							"value": "1500"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "n_4",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1. Отправить запрос.\r",
							"// 2. Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200)\r",
							"})\r",
							"\r",
							"// 3. Спарсить response body в json.\r",
							"var a=pm.response.json()\r",
							"// 4. Спарсить request.\r",
							"var b=pm.request.url.query.toObject()\r",
							"\r",
							"// 5. Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"pm.test(\"name = name request\", function () {\r",
							"    var name_resp=pm.response.json();\r",
							"    var name_requ=pm.request.url.query.toObject().name;\r",
							"    pm.expect(name_resp.name).to.eql(name_requ)\r",
							"})\r",
							"// 6. Проверить, что age в ответе равно age из request (age забрать из request.)\r",
							"pm.test(\"age = age request\", function () {\r",
							"    var age_resp=pm.response.json();\r",
							"    var age_requ=pm.request.url.query.toObject().age;\r",
							"    pm.expect(age_resp.age).to.eql(parseInt(age_requ))\r",
							"})\r",
							"// 7. Вывести в консоль параметр salary из request.\r",
							"console.log(pm.request.url.query.toObject().salary)\r",
							"// 8. Вывести в консоль параметр salary из response.\r",
							"console.log(pm.response.json().salary)\r",
							"\r",
							"// 9. Вывести в консоль 0-й элемент параметра salary из response.\r",
							"console.log(pm.response.json().salary[0])\r",
							"// 10. Вывести в консоль 1-й элемент параметра salary параметр salary из response.\r",
							"console.log(pm.response.json().salary[1])\r",
							"// 11. Вывести в консоль 2-й элемент параметра salary параметр salary из response.\r",
							"console.log(pm.response.json().salary[2])\r",
							"// 12. Проверить, что 0-й элемент параметра salary равен salary из request (salary забрать из request.)\r",
							"pm.test(\"salary_0 = salary request\", function () {\r",
							"    var salary_res=pm.response.json();\r",
							"    var salary_req=pm.request.url.query.toObject().salary;\r",
							"    pm.expect(salary_res.salary[0]).to.eql(parseInt(salary_req))\r",
							"})\r",
							"// 13. Проверить, что 1-й элемент параметра salary равен salary*2 из request (salary забрать из request.)\r",
							"pm.test(\"salary_1 = salary request\", function () {\r",
							"    var salary_resp=pm.response.json();\r",
							"    var salary_req=pm.request.url.query.toObject().salary;\r",
							"    pm.expect(salary_resp.salary[1]).to.eql(JSON.stringify(parseInt(salary_req)*2))\r",
							"})\r",
							"// 14. Проверить, что 2-й элемент параметра salary равен salary*3 из request (salary забрать из request.)\r",
							"pm.test(\"salary_3 = salary request\", function () {\r",
							"    var salary_resp=pm.response.json();\r",
							"    var salary_req=pm.request.url.query.toObject().salary;\r",
							"    pm.expect(salary_resp.salary[2]).to.eql(JSON.stringify(parseInt(salary_req)*3))\r",
							"})\r",
							"// 15. Создать в окружении переменную name\r",
							"// // 18. Передать в окружение переменную name\r",
							"pm.environment.set('name', pm.response.json().name)\r",
							"\r",
							"// 16. Создать в окружении переменную age\r",
							"// // 19. Передать в окружение переменную age\r",
							"pm.environment.set(\"age\", 29)\r",
							"// // 17. Создать в окружении переменную salary\r",
							"// // 20. Передать в окружение переменную salary\r",
							"pm.environment.set(\"salary\", 1000)\r",
							"\r",
							"\r",
							"// 21. Написать цикл который выведет в консоль по порядку элементы списка из параметра salary.\r",
							"for (var key in pm.response.json().salary) {\r",
							"    console.log(key, '=', pm.response.json().salary[key] )\r",
							"}\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5005/object_info_4?name=Alex&age=29&salary=1000",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"object_info_4"
					],
					"query": [
						{
							"key": "name",
							"value": "Alex"
						},
						{
							"key": "age",
							"value": "29"
						},
						{
							"key": "salary",
							"value": "1000"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "n_5",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1. Вставить параметр salary из окружения в request\r",
							"// 2. Вставить параметр age из окружения в age\r",
							"// 3. Вставить параметр name из окружения в name\r",
							"// 4. Отправить запрос.\r",
							"\r",
							"// 5. Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200)\r",
							"});\r",
							"\r",
							"// 6. Спарсить response body в json.\r",
							"var a=pm.response.json();\r",
							"// 7. Спарсить request.\r",
							"var b=request.data;\r",
							"// 8. Проверить, что json response имеет параметр start_qa_salary\r",
							"pm.test(\"start qa salary\", function () {\r",
							"    var salary=pm.response.json();\r",
							"    pm.expect(salary).to.have.any.keys(\"start_qa_salary\")\r",
							"})\r",
							"// 9. Проверить, что json response имеет параметр qa_salary_after_6_months\r",
							"pm.test(\"qa salary after 6 months\", function () {\r",
							"    var salary_res=pm.response.json();\r",
							"    pm.expect(salary_res).to.have.any.keys(\"qa_salary_after_6_months\")\r",
							"})\r",
							"// 10. Проверить, что json response имеет параметр qa_salary_after_12_months\r",
							"pm.test(\"qa salary after 12 months\", function () {\r",
							"    var salary_resp=pm.response.json();\r",
							"    pm.expect(salary_resp).to.have.any.keys(\"qa_salary_after_12_months\")\r",
							"})\r",
							"// 11. Проверить, что json response имеет параметр qa_salary_after_1.5_year\r",
							"pm.test(\"qa_salary_after_1.5_year\", function () {\r",
							"    var salary_resp=pm.response.json();\r",
							"    pm.expect(salary_resp).to.have.any.keys(\"qa_salary_after_1.5_year\")\r",
							"})\r",
							"// 12. Проверить, что json response имеет параметр qa_salary_after_3.5_years\r",
							"pm.test(\"qa_salary_after_3.5_years\", function () {\r",
							"    var salary_resp=pm.response.json();\r",
							"    pm.expect(salary_resp).to.have.any.keys(\"qa_salary_after_3.5_years\")\r",
							"})\r",
							"// 13. Проверить, что json response имеет параметр person\r",
							"pm.test(\"person\", function () {\r",
							"    var pers_resp=pm.response.json();\r",
							"    pm.expect(pers_resp).to.have.any.keys(\"person\")\r",
							"})\r",
							"// 14. Проверить, что параметр start_qa_salary равен salary из request (salary забрать из request.)\r",
							"pm.test(\"start salary = salary request\", function () {\r",
							"    var salary_req=request.data;\r",
							"    var st_salary_resp=pm.response.json();\r",
							"    pm.expect(st_salary_resp.start_qa_salary).to.eql(parseInt(salary_req.salary))\r",
							"\r",
							"})\r",
							"// 15. Проверить, что параметр qa_salary_after_6_months равен salary*2 из request (salary забрать из request.)\r",
							"pm.test(\"qa_salary_after_6_mounths=salary*2\", function () {\r",
							"    var salary_req=request.data;\r",
							"    var qa_salary_resp=pm.response.json();\r",
							"    pm.expect(qa_salary_resp.qa_salary_after_6_months).to.eql(parseInt(salary_req.salary)*2)\r",
							"})\r",
							"// 16. Проверить, что параметр qa_salary_after_12_months равен salary*2.7 из request (salary забрать из request.)\r",
							"pm.test(\" qa_salary_after_12_months равен salary*2.7 \", function () {\r",
							"    var salary_req=request.data;\r",
							"    var qa_salary_resp=pm.response.json();\r",
							"    pm.expect(qa_salary_resp.qa_salary_after_12_months).to.eql(parseInt(salary_req.salary*2.7))\r",
							"})\r",
							"// 17. Проверить, что параметр qa_salary_after_1.5_year равен salary*3.3 из request (salary забрать из request.)\r",
							"pm.test(\"qa_salary_after_1.5_year равен salary*3.3\", function () {\r",
							"    var salary_req=request.data;\r",
							"    var qa_salary_resp=pm.response.json();\r",
							"    pm.expect(qa_salary_resp[\"qa_salary_after_1.5_year\"]).to.eql(parseInt(salary_req.salary*3.3))\r",
							"})\r",
							"// 18. Проверить, что параметр qa_salary_after_3.5_years равен salary*3.8 из request (salary забрать из request.)\r",
							"pm.test(\"qa_salary_after_3.5_years равен salary*3.8\", function () {\r",
							"    var salaty_req=request.data;\r",
							"    var qa_salary_resp=pm.response.json();\r",
							"    pm.expect(qa_salary_resp[\"qa_salary_after_3.5_years\"]).to.eql(parseInt(salaty_req.salary*3.8))\r",
							"})\r",
							"// 19. Проверить, что в параметре person, 1-й элемент из u_name равен salary из request (salary забрать из request.)\r",
							"pm.test(\"1-й элемент из u_name равен salary из request\", function () {\r",
							"    var salary_req=request.data;\r",
							"    var person_resp=pm.response.json();\r",
							"    pm.expect(person_resp.person.u_name[1]).to.eql(parseInt(salary_req.salary))\r",
							"})\r",
							"// 20. Проверить, что что параметр u_age равен age из request (age забрать из request.)\r",
							"pm.test(\"параметр u_age равен age из request\", function () {\r",
							"    var age_req=request.data;\r",
							"    var u_age_resp=pm.response.json();\r",
							"    pm.expect(u_age_resp.person.u_age).to.eql(parseInt(age_req.age))\r",
							"})\r",
							"// 21. Проверить, что параметр u_salary_5_years равен salary*4.2 из request (salary забрать из request.)\r",
							"pm.test(\"u_salary_5_years равен salary*4.2 из request\", function () {\r",
							"    var salary_req=request.data;\r",
							"    var u_salary_resp=pm.response.json();\r",
							"    pm.expect(u_salary_resp.person.u_salary_5_years).to.eql(parseInt(salary_req.salary*4.2))\r",
							"})\r",
							"// 22. ***Написать цикл который выведет в консоль по порядку элементы списка из параметра person.\r",
							"\r",
							"for( var key in pm.response.json().person) {\r",
							"    console.log(key, pm.response.json().person[key])\r",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "{{name}}",
							"type": "text"
						},
						{
							"key": "age",
							"value": "{{age}}",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "{{salary}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/user_info_2",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"user_info_2"
					]
				}
			},
			"response": []
		}
	]
}